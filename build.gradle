plugins {
	id "architectury-plugin" version "3.4-SNAPSHOT"
	id "dev.architectury.loom" version "0.10.0-SNAPSHOT" apply false
	id "org.spongepowered.gradle.vanilla" version "0.2.1-SNAPSHOT" apply false

	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id "com.modrinth.minotaur" version "1.1.0"
	// Dokka docs
	id "org.jetbrains.kotlin.jvm" version "1.5.31"
	id("org.jetbrains.dokka") version "1.5.30"
}

repositories {
	mavenCentral()
	maven {
		url 'https://jitpack.io'
	}
	maven { url "https://maven.pkg.jetbrains.space/public/p/kotlinx-html/maven" }
	maven {
		name = "ParchmentMC"
		url = "https://maven.parchmentmc.net/"
	}
	maven {
		url = "https://repo.spongepowered.org/repository/maven-public/"
	}
}

architectury {
	minecraft = rootProject.minecraft_version
}

subprojects {
	apply plugin: "org.jetbrains.kotlin.jvm"
	apply plugin: "org.jetbrains.dokka"

	if (it.name != 'sponge') {
		apply plugin: "dev.architectury.loom"

		loom {
			silentMojangMappingsLicense()
		}

		dependencies {
			minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
			mappings loom.layered() {
				officialMojangMappings()
				//parchment("org.parchmentmc.data:parchment-1.17.1:2021.10.17@zip")
			}

			// Thanks Shedaniel :)
			implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.5.20-M1'
		}
	} else {
		apply plugin: "org.spongepowered.gradle.vanilla"
	}
}

allprojects {
	apply plugin: "java"
	if (it.name != 'sponge') {
		apply plugin: "architectury-plugin"
	}
	apply plugin: "maven-publish"

	archivesBaseName = rootProject.archives_base_name
	version = rootProject.mod_version
	group = rootProject.maven_group

	repositories {
		mavenCentral()
		maven {
			url 'https://jitpack.io'
		}
		maven {
			name = "Nucleoid maven"
			url = "https://maven.nucleoid.xyz/"
		}
		maven { url "https://maven.pkg.jetbrains.space/public/p/kotlinx-html/maven" }
		maven {
			name = "ParchmentMC"
			url = "https://maven.parchmentmc.net/"
		}
		maven {
			url = "https://repo.spongepowered.org/repository/maven-public/"
		}
	}

	tasks.withType(JavaCompile).configureEach {
		// ensure that the encoding is set to UTF-8, no matter what the system default is
		// this fixes some edge cases with special characters not displaying correctly
		// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
		// If Javadoc is generated, this must be specified in that task too.
		it.options.encoding = "UTF-8"

		it.options.release = 17
	}


	java {
		withSourcesJar()
	}
}
